
LCD_Keypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000556  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000556  000005ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800070  00800070  000005fa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000062c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000668  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f26  00000000  00000000  00000718  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000090a  00000000  00000000  0000163e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007ca  00000000  00000000  00001f48  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000194  00000000  00000000  00002714  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000501  00000000  00000000  000028a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007a1  00000000  00000000  00002da9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  0000354a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e5       	ldi	r30, 0x56	; 86
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 37       	cpi	r26, 0x71	; 113
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 63 01 	call	0x2c6	; 0x2c6 <main>
  8a:	0c 94 a9 02 	jmp	0x552	; 0x552 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Keypad_INIT>:
 *  Author: fawzy
 */ 
#include "Keypad.h"
void Keypad_INIT(void)
{
	DataDir_Keypad |=COLOMNS; //Set COLOMNS as output
  92:	81 b3       	in	r24, 0x11	; 17
  94:	80 6f       	ori	r24, 0xF0	; 240
  96:	81 bb       	out	0x11, r24	; 17
	DataDir_Keypad &=~(ROWS); //Set ROWS as input
  98:	81 b3       	in	r24, 0x11	; 17
  9a:	80 7f       	andi	r24, 0xF0	; 240
  9c:	81 bb       	out	0x11, r24	; 17
	Keypad_PORT = 0xFF; //Set COLOMNS as output high , set rows as input pull-up resistance
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	82 bb       	out	0x12, r24	; 18
  a2:	08 95       	ret

000000a4 <Keypad_getCh>:
}

unsigned char Keypad_getCh(void)
{
	int i,j;
	for(i=0;i<4;i++)
  a4:	60 e0       	ldi	r22, 0x00	; 0
  a6:	70 e0       	ldi	r23, 0x00	; 0
  a8:	3a c0       	rjmp	.+116    	; 0x11e <Keypad_getCh+0x7a>
	{
		for(j=0;j<4;j++)
		{
			Keypad_PORT &= ~(1<<(j+4));
  aa:	22 b3       	in	r18, 0x12	; 18
  ac:	fa 01       	movw	r30, r20
  ae:	34 96       	adiw	r30, 0x04	; 4
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	02 c0       	rjmp	.+4      	; 0xba <Keypad_getCh+0x16>
  b6:	88 0f       	add	r24, r24
  b8:	99 1f       	adc	r25, r25
  ba:	ea 95       	dec	r30
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <Keypad_getCh+0x12>
  be:	38 2f       	mov	r19, r24
  c0:	30 95       	com	r19
  c2:	23 23       	and	r18, r19
  c4:	22 bb       	out	0x12, r18	; 18
			if((Keypad_PIN & (1 << i)) == 0)
  c6:	20 b3       	in	r18, 0x10	; 16
  c8:	30 e0       	ldi	r19, 0x00	; 0
  ca:	06 2e       	mov	r0, r22
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <Keypad_getCh+0x2e>
  ce:	35 95       	asr	r19
  d0:	27 95       	ror	r18
  d2:	0a 94       	dec	r0
  d4:	e2 f7       	brpl	.-8      	; 0xce <Keypad_getCh+0x2a>
  d6:	20 fd       	sbrc	r18, 0
  d8:	15 c0       	rjmp	.+42     	; 0x104 <Keypad_getCh+0x60>
			{
				while((Keypad_PIN & (1 << i)) == 0){}; //Single Pressing MODE
  da:	80 b3       	in	r24, 0x10	; 16
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	06 2e       	mov	r0, r22
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <Keypad_getCh+0x42>
  e2:	95 95       	asr	r25
  e4:	87 95       	ror	r24
  e6:	0a 94       	dec	r0
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <Keypad_getCh+0x3e>
  ea:	80 ff       	sbrs	r24, 0
  ec:	f6 cf       	rjmp	.-20     	; 0xda <Keypad_getCh+0x36>
				return Keypad_Character[i][j];
  ee:	66 0f       	add	r22, r22
  f0:	77 1f       	adc	r23, r23
  f2:	66 0f       	add	r22, r22
  f4:	77 1f       	adc	r23, r23
  f6:	60 5a       	subi	r22, 0xA0	; 160
  f8:	7f 4f       	sbci	r23, 0xFF	; 255
  fa:	fb 01       	movw	r30, r22
  fc:	e4 0f       	add	r30, r20
  fe:	f5 1f       	adc	r31, r21
 100:	80 81       	ld	r24, Z
 102:	08 95       	ret
			}
			Keypad_PORT |= (1<<(j+4));
 104:	92 b3       	in	r25, 0x12	; 18
 106:	89 2b       	or	r24, r25
 108:	82 bb       	out	0x12, r24	; 18
unsigned char Keypad_getCh(void)
{
	int i,j;
	for(i=0;i<4;i++)
	{
		for(j=0;j<4;j++)
 10a:	4f 5f       	subi	r20, 0xFF	; 255
 10c:	5f 4f       	sbci	r21, 0xFF	; 255
 10e:	02 c0       	rjmp	.+4      	; 0x114 <Keypad_getCh+0x70>
 110:	40 e0       	ldi	r20, 0x00	; 0
 112:	50 e0       	ldi	r21, 0x00	; 0
 114:	44 30       	cpi	r20, 0x04	; 4
 116:	51 05       	cpc	r21, r1
 118:	44 f2       	brlt	.-112    	; 0xaa <Keypad_getCh+0x6>
}

unsigned char Keypad_getCh(void)
{
	int i,j;
	for(i=0;i<4;i++)
 11a:	6f 5f       	subi	r22, 0xFF	; 255
 11c:	7f 4f       	sbci	r23, 0xFF	; 255
 11e:	64 30       	cpi	r22, 0x04	; 4
 120:	71 05       	cpc	r23, r1
 122:	b4 f3       	brlt	.-20     	; 0x110 <Keypad_getCh+0x6c>
				return Keypad_Character[i][j];
			}
			Keypad_PORT |= (1<<(j+4));
		}
	}
	return '$'; //to indicate no key pressed
 124:	84 e2       	ldi	r24, 0x24	; 36
 126:	08 95       	ret

00000128 <LCD_Kick>:
	DataDir_LCD_PORT |= (0xFF <<DATA_shift);
	LCD_CTRL &=~(1<<RW_SWITCH);
}
void LCD_Kick(void)
{
	LCD_CTRL &= ~(1<<EN_SWITCH);
 128:	88 b3       	in	r24, 0x18	; 24
 12a:	87 7f       	andi	r24, 0xF7	; 247
 12c:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12e:	83 ed       	ldi	r24, 0xD3	; 211
 130:	90 e3       	ldi	r25, 0x30	; 48
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <LCD_Kick+0xa>
 136:	00 c0       	rjmp	.+0      	; 0x138 <LCD_Kick+0x10>
 138:	00 00       	nop
	_delay_ms(50);
	LCD_CTRL |= (1<<EN_SWITCH);
 13a:	88 b3       	in	r24, 0x18	; 24
 13c:	88 60       	ori	r24, 0x08	; 8
 13e:	88 bb       	out	0x18, r24	; 24
 140:	08 95       	ret

00000142 <LCD_check_isbusy>:
		}
	}
}
void LCD_check_isbusy(void)
{
	DataDir_LCD_PORT &=~(0xFF<<DATA_shift);
 142:	8a b3       	in	r24, 0x1a	; 26
 144:	1a ba       	out	0x1a, r1	; 26
	LCD_CTRL |=(1<<RW_SWITCH);
 146:	88 b3       	in	r24, 0x18	; 24
 148:	84 60       	ori	r24, 0x04	; 4
 14a:	88 bb       	out	0x18, r24	; 24
	LCD_CTRL &=~(1<<RS_SWITCH);
 14c:	88 b3       	in	r24, 0x18	; 24
 14e:	8d 7f       	andi	r24, 0xFD	; 253
 150:	88 bb       	out	0x18, r24	; 24
	LCD_Kick();
 152:	0e 94 94 00 	call	0x128	; 0x128 <LCD_Kick>
	DataDir_LCD_PORT |= (0xFF <<DATA_shift);
 156:	8a b3       	in	r24, 0x1a	; 26
 158:	8f ef       	ldi	r24, 0xFF	; 255
 15a:	8a bb       	out	0x1a, r24	; 26
	LCD_CTRL &=~(1<<RW_SWITCH);
 15c:	88 b3       	in	r24, 0x18	; 24
 15e:	8b 7f       	andi	r24, 0xFB	; 251
 160:	88 bb       	out	0x18, r24	; 24
 162:	08 95       	ret

00000164 <LCD_WRITE_COMMAND>:
void LCD_clear_screen()
{
		LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
}
void LCD_WRITE_COMMAND(unsigned char command)
{
 164:	cf 93       	push	r28
 166:	c8 2f       	mov	r28, r24
	LCD_check_isbusy();
 168:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_check_isbusy>
	#ifdef EIGHT_BIT_MODE
	LCD_PORT = command;
 16c:	cb bb       	out	0x1b, r28	; 27
	LCD_CTRL &= ~(1<<RW_SWITCH | 1<<RS_SWITCH);
 16e:	88 b3       	in	r24, 0x18	; 24
 170:	89 7f       	andi	r24, 0xF9	; 249
 172:	88 bb       	out	0x18, r24	; 24
	LCD_Kick();
 174:	0e 94 94 00 	call	0x128	; 0x128 <LCD_Kick>
	LCD_Kick();
	LCD_PORT = (LCD_PORT & 0x0F) | (command << 4);	//Then Send the lower 4 bits by shifting them (making them the higher 4 bits then)
	LCD_CTRL &= ~(1<<RW_SWITCH | 1<<RS_SWITCH);
	LCD_Kick();
	#endif
}
 178:	cf 91       	pop	r28
 17a:	08 95       	ret

0000017c <LCD_clear_screen>:
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
}
void LCD_clear_screen()
{
		LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	0e 94 b2 00 	call	0x164	; 0x164 <LCD_WRITE_COMMAND>
 182:	08 95       	ret

00000184 <LCD_INIT>:
 184:	87 e8       	ldi	r24, 0x87	; 135
 186:	93 e1       	ldi	r25, 0x13	; 19
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <LCD_INIT+0x4>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <LCD_INIT+0xa>
 18e:	00 00       	nop
#include <stdio.h>
#include <stdlib.h>
void LCD_INIT()
{
	_delay_ms(20);
	DataDir_LCD_CTRL |= (1<<EN_SWITCH | 1<<RS_SWITCH | 1<<RW_SWITCH);
 190:	87 b3       	in	r24, 0x17	; 23
 192:	8e 60       	ori	r24, 0x0E	; 14
 194:	87 bb       	out	0x17, r24	; 23
	LCD_CTRL &= ~ (1<<EN_SWITCH | 1<<RS_SWITCH | 1<<RW_SWITCH);
 196:	88 b3       	in	r24, 0x18	; 24
 198:	81 7f       	andi	r24, 0xF1	; 241
 19a:	88 bb       	out	0x18, r24	; 24
	DataDir_LCD_PORT = 0xFF << DATA_shift; //To work in both FOUR & EIGH BIT MODE
 19c:	8f ef       	ldi	r24, 0xFF	; 255
 19e:	8a bb       	out	0x1a, r24	; 26
 1a0:	85 ea       	ldi	r24, 0xA5	; 165
 1a2:	9e e0       	ldi	r25, 0x0E	; 14
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <LCD_INIT+0x20>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <LCD_INIT+0x26>
 1aa:	00 00       	nop
	_delay_ms(15);
	LCD_clear_screen();
 1ac:	0e 94 be 00 	call	0x17c	; 0x17c <LCD_clear_screen>
	#ifdef EIGHT_BIT_MODE
	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 1b0:	88 e3       	ldi	r24, 0x38	; 56
 1b2:	0e 94 b2 00 	call	0x164	; 0x164 <LCD_WRITE_COMMAND>
	#endif
	#ifdef FOUR_BIT_MODE
	LCD_WRITE_COMMAND(0x02);
	LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINES);
	#endif
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 1b6:	86 e0       	ldi	r24, 0x06	; 6
 1b8:	0e 94 b2 00 	call	0x164	; 0x164 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 1bc:	80 e8       	ldi	r24, 0x80	; 128
 1be:	0e 94 b2 00 	call	0x164	; 0x164 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 1c2:	8f e0       	ldi	r24, 0x0F	; 15
 1c4:	0e 94 b2 00 	call	0x164	; 0x164 <LCD_WRITE_COMMAND>
 1c8:	08 95       	ret

000001ca <LCD_WRITE_CHAR>:
	LCD_CTRL &= ~(1<<RW_SWITCH | 1<<RS_SWITCH);
	LCD_Kick();
	#endif
}
void LCD_WRITE_CHAR(unsigned char character)
{
 1ca:	cf 93       	push	r28
 1cc:	c8 2f       	mov	r28, r24
	static unsigned char tracker=0;
	#ifdef EIGHT_BIT_MODE
	LCD_check_isbusy();
 1ce:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_check_isbusy>
	LCD_PORT = character;
 1d2:	cb bb       	out	0x1b, r28	; 27
	LCD_CTRL |= (1<<RS_SWITCH);
 1d4:	88 b3       	in	r24, 0x18	; 24
 1d6:	82 60       	ori	r24, 0x02	; 2
 1d8:	88 bb       	out	0x18, r24	; 24
	LCD_CTRL &=~(1<<RW_SWITCH);
 1da:	88 b3       	in	r24, 0x18	; 24
 1dc:	8b 7f       	andi	r24, 0xFB	; 251
 1de:	88 bb       	out	0x18, r24	; 24
	LCD_PORT = (LCD_PORT & 0x0F) | (character << 4);
	LCD_CTRL |= (1<<RS_SWITCH);
	LCD_CTRL &=~(1<<RW_SWITCH);
	//Note : the next LCD_KICK() will be excecuted in both modes (you can also do it like in LCD_WRITE_COMMAND)
	#endif
	if(tracker==16)
 1e0:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
 1e4:	80 31       	cpi	r24, 0x10	; 16
 1e6:	21 f4       	brne	.+8      	; 0x1f0 <LCD_WRITE_CHAR+0x26>
	{
		LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW);
 1e8:	80 ec       	ldi	r24, 0xC0	; 192
 1ea:	0e 94 b2 00 	call	0x164	; 0x164 <LCD_WRITE_COMMAND>
 1ee:	0a c0       	rjmp	.+20     	; 0x204 <LCD_WRITE_CHAR+0x3a>
	}
	else if(tracker == 32)
 1f0:	80 32       	cpi	r24, 0x20	; 32
 1f2:	41 f4       	brne	.+16     	; 0x204 <LCD_WRITE_CHAR+0x3a>
	{
		LCD_clear_screen();
 1f4:	0e 94 be 00 	call	0x17c	; 0x17c <LCD_clear_screen>
 1f8:	83 ec       	ldi	r24, 0xC3	; 195
 1fa:	99 e0       	ldi	r25, 0x09	; 9
 1fc:	01 97       	sbiw	r24, 0x01	; 1
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <LCD_WRITE_CHAR+0x32>
 200:	00 c0       	rjmp	.+0      	; 0x202 <LCD_WRITE_CHAR+0x38>
 202:	00 00       	nop
		_delay_ms(10);
	}
	LCD_Kick();
 204:	0e 94 94 00 	call	0x128	; 0x128 <LCD_Kick>
	tracker++;
 208:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
 20c:	8f 5f       	subi	r24, 0xFF	; 255
 20e:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__data_end>
}
 212:	cf 91       	pop	r28
 214:	08 95       	ret

00000216 <LCD_GOTO_XY>:
	_delay_ms(50);
	LCD_CTRL |= (1<<EN_SWITCH);
}
void LCD_GOTO_XY(unsigned char line, unsigned char position)
{
	if(line == 0 && (position < 16 && position >= 0))
 216:	81 11       	cpse	r24, r1
 218:	07 c0       	rjmp	.+14     	; 0x228 <LCD_GOTO_XY+0x12>
 21a:	60 31       	cpi	r22, 0x10	; 16
 21c:	28 f4       	brcc	.+10     	; 0x228 <LCD_GOTO_XY+0x12>
	{
		LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW + position);
 21e:	80 e8       	ldi	r24, 0x80	; 128
 220:	86 0f       	add	r24, r22
 222:	0e 94 b2 00 	call	0x164	; 0x164 <LCD_WRITE_COMMAND>
 226:	08 95       	ret
	}
	else if (line == 1 && (position < 16 && position >= 0))
 228:	81 30       	cpi	r24, 0x01	; 1
 22a:	31 f4       	brne	.+12     	; 0x238 <LCD_GOTO_XY+0x22>
 22c:	60 31       	cpi	r22, 0x10	; 16
 22e:	20 f4       	brcc	.+8      	; 0x238 <LCD_GOTO_XY+0x22>
	{
		LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW + position);
 230:	80 ec       	ldi	r24, 0xC0	; 192
 232:	86 0f       	add	r24, r22
 234:	0e 94 b2 00 	call	0x164	; 0x164 <LCD_WRITE_COMMAND>
 238:	08 95       	ret

0000023a <LCD_WRITE_STRING>:
		_delay_ms(10);
	}
	LCD_Kick();
	tracker++;
}
void LCD_WRITE_STRING(char* string){
 23a:	0f 93       	push	r16
 23c:	1f 93       	push	r17
 23e:	cf 93       	push	r28
 240:	df 93       	push	r29
 242:	8c 01       	movw	r16, r24
	int count = 0;
 244:	c0 e0       	ldi	r28, 0x00	; 0
 246:	d0 e0       	ldi	r29, 0x00	; 0
	while (*string > 0){
 248:	18 c0       	rjmp	.+48     	; 0x27a <LCD_WRITE_STRING+0x40>
		count++;
 24a:	21 96       	adiw	r28, 0x01	; 1
		LCD_WRITE_CHAR(*string++);
 24c:	0f 5f       	subi	r16, 0xFF	; 255
 24e:	1f 4f       	sbci	r17, 0xFF	; 255
 250:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LCD_WRITE_CHAR>
		if (count == 16)
 254:	c0 31       	cpi	r28, 0x10	; 16
 256:	d1 05       	cpc	r29, r1
 258:	29 f4       	brne	.+10     	; 0x264 <LCD_WRITE_STRING+0x2a>
		{
			LCD_GOTO_XY(1,0);
 25a:	60 e0       	ldi	r22, 0x00	; 0
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_GOTO_XY>
 262:	0b c0       	rjmp	.+22     	; 0x27a <LCD_WRITE_STRING+0x40>
		}
		else if (count == 32)
 264:	c0 32       	cpi	r28, 0x20	; 32
 266:	d1 05       	cpc	r29, r1
 268:	41 f4       	brne	.+16     	; 0x27a <LCD_WRITE_STRING+0x40>
		{
			LCD_clear_screen();
 26a:	0e 94 be 00 	call	0x17c	; 0x17c <LCD_clear_screen>
			LCD_GOTO_XY(0,0);
 26e:	60 e0       	ldi	r22, 0x00	; 0
 270:	80 e0       	ldi	r24, 0x00	; 0
 272:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_GOTO_XY>
			count = 0;
 276:	c0 e0       	ldi	r28, 0x00	; 0
 278:	d0 e0       	ldi	r29, 0x00	; 0
	LCD_Kick();
	tracker++;
}
void LCD_WRITE_STRING(char* string){
	int count = 0;
	while (*string > 0){
 27a:	f8 01       	movw	r30, r16
 27c:	80 81       	ld	r24, Z
 27e:	81 11       	cpse	r24, r1
 280:	e4 cf       	rjmp	.-56     	; 0x24a <LCD_WRITE_STRING+0x10>
			LCD_clear_screen();
			LCD_GOTO_XY(0,0);
			count = 0;
		}
	}
}
 282:	df 91       	pop	r29
 284:	cf 91       	pop	r28
 286:	1f 91       	pop	r17
 288:	0f 91       	pop	r16
 28a:	08 95       	ret

0000028c <LCD_Display_Number>:
	{
		LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW + position);
	}
}
void LCD_Display_Number(int number)
{
 28c:	cf 93       	push	r28
 28e:	df 93       	push	r29
 290:	cd b7       	in	r28, 0x3d	; 61
 292:	de b7       	in	r29, 0x3e	; 62
 294:	27 97       	sbiw	r28, 0x07	; 7
 296:	0f b6       	in	r0, 0x3f	; 63
 298:	f8 94       	cli
 29a:	de bf       	out	0x3e, r29	; 62
 29c:	0f be       	out	0x3f, r0	; 63
 29e:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 2a0:	4a e0       	ldi	r20, 0x0A	; 10
 2a2:	be 01       	movw	r22, r28
 2a4:	6f 5f       	subi	r22, 0xFF	; 255
 2a6:	7f 4f       	sbci	r23, 0xFF	; 255
 2a8:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <__itoa_ncheck>
	char str[7]; //assume max number is 7 digits 
	itoa(number ,str,10);
	LCD_WRITE_STRING(str);
 2ac:	ce 01       	movw	r24, r28
 2ae:	01 96       	adiw	r24, 0x01	; 1
 2b0:	0e 94 1d 01 	call	0x23a	; 0x23a <LCD_WRITE_STRING>
}
 2b4:	27 96       	adiw	r28, 0x07	; 7
 2b6:	0f b6       	in	r0, 0x3f	; 63
 2b8:	f8 94       	cli
 2ba:	de bf       	out	0x3e, r29	; 62
 2bc:	0f be       	out	0x3f, r0	; 63
 2be:	cd bf       	out	0x3d, r28	; 61
 2c0:	df 91       	pop	r29
 2c2:	cf 91       	pop	r28
 2c4:	08 95       	ret

000002c6 <main>:
#include "LCD/LCD.h"
#include "Keypad/Keypad.h"
#include <stdlib.h>

int main(void)
{
 2c6:	cf 93       	push	r28
 2c8:	df 93       	push	r29
 2ca:	cd b7       	in	r28, 0x3d	; 61
 2cc:	de b7       	in	r29, 0x3e	; 62
 2ce:	2e 97       	sbiw	r28, 0x0e	; 14
 2d0:	0f b6       	in	r0, 0x3f	; 63
 2d2:	f8 94       	cli
 2d4:	de bf       	out	0x3e, r29	; 62
 2d6:	0f be       	out	0x3f, r0	; 63
 2d8:	cd bf       	out	0x3d, r28	; 61
	LCD_INIT();
 2da:	0e 94 c2 00 	call	0x184	; 0x184 <LCD_INIT>
	LCD_WRITE_CHAR(':');
	LCD_Display_Number(2024);
	LCD_WRITE_CHAR(' ');
	LCD_Display_Real_Number(1.20);
	LCD_WRITE_STRING("AM");*/
	Keypad_INIT();
 2de:	0e 94 49 00 	call	0x92	; 0x92 <Keypad_INIT>
    unsigned char pressed_key;
    unsigned char op1[7] = {0}, op2[7] = {0}, operator = 0;
 2e2:	87 e0       	ldi	r24, 0x07	; 7
 2e4:	fe 01       	movw	r30, r28
 2e6:	31 96       	adiw	r30, 0x01	; 1
 2e8:	df 01       	movw	r26, r30
 2ea:	28 2f       	mov	r18, r24
 2ec:	1d 92       	st	X+, r1
 2ee:	2a 95       	dec	r18
 2f0:	e9 f7       	brne	.-6      	; 0x2ec <main+0x26>
 2f2:	37 96       	adiw	r30, 0x07	; 7
 2f4:	df 01       	movw	r26, r30
 2f6:	1d 92       	st	X+, r1
 2f8:	8a 95       	dec	r24
 2fa:	e9 f7       	brne	.-6      	; 0x2f6 <main+0x30>
    int i = 0, j = 0, result = 0;
    LCD_clear_screen();
 2fc:	0e 94 be 00 	call	0x17c	; 0x17c <LCD_clear_screen>
	LCD_Display_Real_Number(1.20);
	LCD_WRITE_STRING("AM");*/
	Keypad_INIT();
    unsigned char pressed_key;
    unsigned char op1[7] = {0}, op2[7] = {0}, operator = 0;
    int i = 0, j = 0, result = 0;
 300:	c1 2c       	mov	r12, r1
 302:	d1 2c       	mov	r13, r1
 304:	e1 2c       	mov	r14, r1
 306:	f1 2c       	mov	r15, r1
	LCD_WRITE_CHAR(' ');
	LCD_Display_Real_Number(1.20);
	LCD_WRITE_STRING("AM");*/
	Keypad_INIT();
    unsigned char pressed_key;
    unsigned char op1[7] = {0}, op2[7] = {0}, operator = 0;
 308:	00 e0       	ldi	r16, 0x00	; 0
    int i = 0, j = 0, result = 0;
    LCD_clear_screen();
    while (1)
    {
	    pressed_key = Keypad_getCh(); // Assuming this function returns '$' if no key is pressed
 30a:	0e 94 52 00 	call	0xa4	; 0xa4 <Keypad_getCh>
 30e:	18 2f       	mov	r17, r24

	    if(pressed_key == '$') // No key pressed
 310:	84 32       	cpi	r24, 0x24	; 36
 312:	d9 f3       	breq	.-10     	; 0x30a <main+0x44>
	    {
		    continue;
	    }
	    else if(pressed_key == '!') // Clear screen and reset calculator
 314:	81 32       	cpi	r24, 0x21	; 33
 316:	51 f4       	brne	.+20     	; 0x32c <main+0x66>
	    {
		    LCD_clear_screen();
 318:	0e 94 be 00 	call	0x17c	; 0x17c <LCD_clear_screen>
		    i = j = 0; // Reset indexes
		    op1[0] = op2[0] = operator = 0; // Reset operands and operator
 31c:	18 86       	std	Y+8, r1	; 0x08
 31e:	19 82       	std	Y+1, r1	; 0x01
		    continue;
	    }
	    else if(pressed_key == '!') // Clear screen and reset calculator
	    {
		    LCD_clear_screen();
		    i = j = 0; // Reset indexes
 320:	c1 2c       	mov	r12, r1
 322:	d1 2c       	mov	r13, r1
 324:	e1 2c       	mov	r14, r1
 326:	f1 2c       	mov	r15, r1
		    op1[0] = op2[0] = operator = 0; // Reset operands and operator
 328:	00 e0       	ldi	r16, 0x00	; 0
		    continue;
 32a:	ef cf       	rjmp	.-34     	; 0x30a <main+0x44>
	    }
	    else if(pressed_key >= '0' && pressed_key <= '9') // Check for numeric input
 32c:	80 ed       	ldi	r24, 0xD0	; 208
 32e:	81 0f       	add	r24, r17
 330:	8a 30       	cpi	r24, 0x0A	; 10
 332:	e0 f4       	brcc	.+56     	; 0x36c <main+0xa6>
	    {
		    LCD_WRITE_CHAR(pressed_key); // Display the pressed key
 334:	81 2f       	mov	r24, r17
 336:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LCD_WRITE_CHAR>

		    if(operator == 0) // Still capturing the first operand
 33a:	01 11       	cpse	r16, r1
 33c:	0c c0       	rjmp	.+24     	; 0x356 <main+0x90>
		    {
			    op1[i++] = pressed_key;
 33e:	e1 e0       	ldi	r30, 0x01	; 1
 340:	f0 e0       	ldi	r31, 0x00	; 0
 342:	ec 0f       	add	r30, r28
 344:	fd 1f       	adc	r31, r29
 346:	ee 0d       	add	r30, r14
 348:	ff 1d       	adc	r31, r15
 34a:	10 83       	st	Z, r17
 34c:	97 01       	movw	r18, r14
 34e:	2f 5f       	subi	r18, 0xFF	; 255
 350:	3f 4f       	sbci	r19, 0xFF	; 255
 352:	79 01       	movw	r14, r18
 354:	da cf       	rjmp	.-76     	; 0x30a <main+0x44>
		    }
		    else // Capturing the second operand
		    {
			    op2[j++] = pressed_key;
 356:	e8 e0       	ldi	r30, 0x08	; 8
 358:	f0 e0       	ldi	r31, 0x00	; 0
 35a:	ec 0f       	add	r30, r28
 35c:	fd 1f       	adc	r31, r29
 35e:	ec 0d       	add	r30, r12
 360:	fd 1d       	adc	r31, r13
 362:	10 83       	st	Z, r17
 364:	c6 01       	movw	r24, r12
 366:	01 96       	adiw	r24, 0x01	; 1
 368:	6c 01       	movw	r12, r24
 36a:	cf cf       	rjmp	.-98     	; 0x30a <main+0x44>
		    }
	    }
	    else if(pressed_key == '=')
 36c:	1d 33       	cpi	r17, 0x3D	; 61
 36e:	09 f0       	breq	.+2      	; 0x372 <main+0xac>
 370:	68 c0       	rjmp	.+208    	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
	    {
		    LCD_WRITE_CHAR(pressed_key);
 372:	81 2f       	mov	r24, r17
 374:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LCD_WRITE_CHAR>

		    // Perform the operation
		    switch(operator)
 378:	0b 32       	cpi	r16, 0x2B	; 43
 37a:	49 f0       	breq	.+18     	; 0x38e <main+0xc8>
 37c:	18 f4       	brcc	.+6      	; 0x384 <main+0xbe>
 37e:	0a 32       	cpi	r16, 0x2A	; 42
 380:	91 f0       	breq	.+36     	; 0x3a6 <main+0xe0>
 382:	c3 cf       	rjmp	.-122    	; 0x30a <main+0x44>
 384:	0d 32       	cpi	r16, 0x2D	; 45
 386:	09 f1       	breq	.+66     	; 0x3ca <main+0x104>
 388:	0f 32       	cpi	r16, 0x2F	; 47
 38a:	69 f1       	breq	.+90     	; 0x3e6 <main+0x120>
 38c:	be cf       	rjmp	.-132    	; 0x30a <main+0x44>
		    {
			    case '+':
			    result = atoi(op1) + atoi(op2);
 38e:	ce 01       	movw	r24, r28
 390:	01 96       	adiw	r24, 0x01	; 1
 392:	0e 94 4e 02 	call	0x49c	; 0x49c <atoi>
 396:	8c 01       	movw	r16, r24
 398:	ce 01       	movw	r24, r28
 39a:	08 96       	adiw	r24, 0x08	; 8
 39c:	0e 94 4e 02 	call	0x49c	; 0x49c <atoi>
 3a0:	80 0f       	add	r24, r16
 3a2:	91 1f       	adc	r25, r17
			    break;
 3a4:	2e c0       	rjmp	.+92     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
			    case '*':
			    result = atoi(op1) * atoi(op2);
 3a6:	ce 01       	movw	r24, r28
 3a8:	01 96       	adiw	r24, 0x01	; 1
 3aa:	0e 94 4e 02 	call	0x49c	; 0x49c <atoi>
 3ae:	8c 01       	movw	r16, r24
 3b0:	ce 01       	movw	r24, r28
 3b2:	08 96       	adiw	r24, 0x08	; 8
 3b4:	0e 94 4e 02 	call	0x49c	; 0x49c <atoi>
 3b8:	dc 01       	movw	r26, r24
 3ba:	0a 9f       	mul	r16, r26
 3bc:	c0 01       	movw	r24, r0
 3be:	0b 9f       	mul	r16, r27
 3c0:	90 0d       	add	r25, r0
 3c2:	1a 9f       	mul	r17, r26
 3c4:	90 0d       	add	r25, r0
 3c6:	11 24       	eor	r1, r1
			    break;
 3c8:	1c c0       	rjmp	.+56     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
			    case '-':
			    result = atoi(op1) - atoi(op2);
 3ca:	ce 01       	movw	r24, r28
 3cc:	01 96       	adiw	r24, 0x01	; 1
 3ce:	0e 94 4e 02 	call	0x49c	; 0x49c <atoi>
 3d2:	8c 01       	movw	r16, r24
 3d4:	ce 01       	movw	r24, r28
 3d6:	08 96       	adiw	r24, 0x08	; 8
 3d8:	0e 94 4e 02 	call	0x49c	; 0x49c <atoi>
 3dc:	98 01       	movw	r18, r16
 3de:	28 1b       	sub	r18, r24
 3e0:	39 0b       	sbc	r19, r25
 3e2:	c9 01       	movw	r24, r18
			    break;
 3e4:	0e c0       	rjmp	.+28     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
			    case '/':
			    result = atoi(op1) / atoi(op2);
 3e6:	ce 01       	movw	r24, r28
 3e8:	01 96       	adiw	r24, 0x01	; 1
 3ea:	0e 94 4e 02 	call	0x49c	; 0x49c <atoi>
 3ee:	8c 01       	movw	r16, r24
 3f0:	ce 01       	movw	r24, r28
 3f2:	08 96       	adiw	r24, 0x08	; 8
 3f4:	0e 94 4e 02 	call	0x49c	; 0x49c <atoi>
 3f8:	bc 01       	movw	r22, r24
 3fa:	c8 01       	movw	r24, r16
 3fc:	0e 94 26 02 	call	0x44c	; 0x44c <__divmodhi4>
 400:	cb 01       	movw	r24, r22
			    break;
			    default:
			    continue;
			    break;
		    }
			 LCD_Display_Number(result);
 402:	0e 94 46 01 	call	0x28c	; 0x28c <LCD_Display_Number>
 406:	3f e7       	ldi	r19, 0x7F	; 127
 408:	8a e1       	ldi	r24, 0x1A	; 26
 40a:	96 e0       	ldi	r25, 0x06	; 6
 40c:	31 50       	subi	r19, 0x01	; 1
 40e:	80 40       	sbci	r24, 0x00	; 0
 410:	90 40       	sbci	r25, 0x00	; 0
 412:	e1 f7       	brne	.-8      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 414:	00 c0       	rjmp	.+0      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 416:	00 00       	nop
			_delay_ms(2000);

			// Clear for next operation
			LCD_clear_screen();
 418:	0e 94 be 00 	call	0x17c	; 0x17c <LCD_clear_screen>
			memset(op1, 0, sizeof(op1)); // Clear op1
 41c:	87 e0       	ldi	r24, 0x07	; 7
 41e:	fe 01       	movw	r30, r28
 420:	31 96       	adiw	r30, 0x01	; 1
 422:	df 01       	movw	r26, r30
 424:	28 2f       	mov	r18, r24
 426:	1d 92       	st	X+, r1
 428:	2a 95       	dec	r18
 42a:	e9 f7       	brne	.-6      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
			memset(op2, 0, sizeof(op2)); // Clear op2
 42c:	37 96       	adiw	r30, 0x07	; 7
 42e:	df 01       	movw	r26, r30
 430:	1d 92       	st	X+, r1
 432:	8a 95       	dec	r24
 434:	e9 f7       	brne	.-6      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
			i = j = 0;
 436:	c1 2c       	mov	r12, r1
 438:	d1 2c       	mov	r13, r1
 43a:	e1 2c       	mov	r14, r1
 43c:	f1 2c       	mov	r15, r1
			operator = 0;
 43e:	00 e0       	ldi	r16, 0x00	; 0
 440:	64 cf       	rjmp	.-312    	; 0x30a <main+0x44>
	    }
	    else // Capture operator
	    {
		    operator = pressed_key;
		    LCD_WRITE_CHAR(pressed_key);
 442:	81 2f       	mov	r24, r17
 444:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LCD_WRITE_CHAR>
			i = j = 0;
			operator = 0;
	    }
	    else // Capture operator
	    {
		    operator = pressed_key;
 448:	01 2f       	mov	r16, r17
 44a:	5f cf       	rjmp	.-322    	; 0x30a <main+0x44>

0000044c <__divmodhi4>:
 44c:	97 fb       	bst	r25, 7
 44e:	07 2e       	mov	r0, r23
 450:	16 f4       	brtc	.+4      	; 0x456 <__divmodhi4+0xa>
 452:	00 94       	com	r0
 454:	07 d0       	rcall	.+14     	; 0x464 <__divmodhi4_neg1>
 456:	77 fd       	sbrc	r23, 7
 458:	09 d0       	rcall	.+18     	; 0x46c <__divmodhi4_neg2>
 45a:	0e 94 3a 02 	call	0x474	; 0x474 <__udivmodhi4>
 45e:	07 fc       	sbrc	r0, 7
 460:	05 d0       	rcall	.+10     	; 0x46c <__divmodhi4_neg2>
 462:	3e f4       	brtc	.+14     	; 0x472 <__divmodhi4_exit>

00000464 <__divmodhi4_neg1>:
 464:	90 95       	com	r25
 466:	81 95       	neg	r24
 468:	9f 4f       	sbci	r25, 0xFF	; 255
 46a:	08 95       	ret

0000046c <__divmodhi4_neg2>:
 46c:	70 95       	com	r23
 46e:	61 95       	neg	r22
 470:	7f 4f       	sbci	r23, 0xFF	; 255

00000472 <__divmodhi4_exit>:
 472:	08 95       	ret

00000474 <__udivmodhi4>:
 474:	aa 1b       	sub	r26, r26
 476:	bb 1b       	sub	r27, r27
 478:	51 e1       	ldi	r21, 0x11	; 17
 47a:	07 c0       	rjmp	.+14     	; 0x48a <__udivmodhi4_ep>

0000047c <__udivmodhi4_loop>:
 47c:	aa 1f       	adc	r26, r26
 47e:	bb 1f       	adc	r27, r27
 480:	a6 17       	cp	r26, r22
 482:	b7 07       	cpc	r27, r23
 484:	10 f0       	brcs	.+4      	; 0x48a <__udivmodhi4_ep>
 486:	a6 1b       	sub	r26, r22
 488:	b7 0b       	sbc	r27, r23

0000048a <__udivmodhi4_ep>:
 48a:	88 1f       	adc	r24, r24
 48c:	99 1f       	adc	r25, r25
 48e:	5a 95       	dec	r21
 490:	a9 f7       	brne	.-22     	; 0x47c <__udivmodhi4_loop>
 492:	80 95       	com	r24
 494:	90 95       	com	r25
 496:	bc 01       	movw	r22, r24
 498:	cd 01       	movw	r24, r26
 49a:	08 95       	ret

0000049c <atoi>:
 49c:	fc 01       	movw	r30, r24
 49e:	88 27       	eor	r24, r24
 4a0:	99 27       	eor	r25, r25
 4a2:	e8 94       	clt
 4a4:	21 91       	ld	r18, Z+
 4a6:	20 32       	cpi	r18, 0x20	; 32
 4a8:	e9 f3       	breq	.-6      	; 0x4a4 <atoi+0x8>
 4aa:	29 30       	cpi	r18, 0x09	; 9
 4ac:	10 f0       	brcs	.+4      	; 0x4b2 <atoi+0x16>
 4ae:	2e 30       	cpi	r18, 0x0E	; 14
 4b0:	c8 f3       	brcs	.-14     	; 0x4a4 <atoi+0x8>
 4b2:	2b 32       	cpi	r18, 0x2B	; 43
 4b4:	41 f0       	breq	.+16     	; 0x4c6 <atoi+0x2a>
 4b6:	2d 32       	cpi	r18, 0x2D	; 45
 4b8:	39 f4       	brne	.+14     	; 0x4c8 <atoi+0x2c>
 4ba:	68 94       	set
 4bc:	04 c0       	rjmp	.+8      	; 0x4c6 <atoi+0x2a>
 4be:	0e 94 77 02 	call	0x4ee	; 0x4ee <__mulhi_const_10>
 4c2:	82 0f       	add	r24, r18
 4c4:	91 1d       	adc	r25, r1
 4c6:	21 91       	ld	r18, Z+
 4c8:	20 53       	subi	r18, 0x30	; 48
 4ca:	2a 30       	cpi	r18, 0x0A	; 10
 4cc:	c0 f3       	brcs	.-16     	; 0x4be <atoi+0x22>
 4ce:	1e f4       	brtc	.+6      	; 0x4d6 <atoi+0x3a>
 4d0:	90 95       	com	r25
 4d2:	81 95       	neg	r24
 4d4:	9f 4f       	sbci	r25, 0xFF	; 255
 4d6:	08 95       	ret

000004d8 <__itoa_ncheck>:
 4d8:	bb 27       	eor	r27, r27
 4da:	4a 30       	cpi	r20, 0x0A	; 10
 4dc:	31 f4       	brne	.+12     	; 0x4ea <__itoa_ncheck+0x12>
 4de:	99 23       	and	r25, r25
 4e0:	22 f4       	brpl	.+8      	; 0x4ea <__itoa_ncheck+0x12>
 4e2:	bd e2       	ldi	r27, 0x2D	; 45
 4e4:	90 95       	com	r25
 4e6:	81 95       	neg	r24
 4e8:	9f 4f       	sbci	r25, 0xFF	; 255
 4ea:	0c 94 80 02 	jmp	0x500	; 0x500 <__utoa_common>

000004ee <__mulhi_const_10>:
 4ee:	7a e0       	ldi	r23, 0x0A	; 10
 4f0:	97 9f       	mul	r25, r23
 4f2:	90 2d       	mov	r25, r0
 4f4:	87 9f       	mul	r24, r23
 4f6:	80 2d       	mov	r24, r0
 4f8:	91 0d       	add	r25, r1
 4fa:	11 24       	eor	r1, r1
 4fc:	08 95       	ret

000004fe <__utoa_ncheck>:
 4fe:	bb 27       	eor	r27, r27

00000500 <__utoa_common>:
 500:	fb 01       	movw	r30, r22
 502:	55 27       	eor	r21, r21
 504:	aa 27       	eor	r26, r26
 506:	88 0f       	add	r24, r24
 508:	99 1f       	adc	r25, r25
 50a:	aa 1f       	adc	r26, r26
 50c:	a4 17       	cp	r26, r20
 50e:	10 f0       	brcs	.+4      	; 0x514 <__utoa_common+0x14>
 510:	a4 1b       	sub	r26, r20
 512:	83 95       	inc	r24
 514:	50 51       	subi	r21, 0x10	; 16
 516:	b9 f7       	brne	.-18     	; 0x506 <__utoa_common+0x6>
 518:	a0 5d       	subi	r26, 0xD0	; 208
 51a:	aa 33       	cpi	r26, 0x3A	; 58
 51c:	08 f0       	brcs	.+2      	; 0x520 <__utoa_common+0x20>
 51e:	a9 5d       	subi	r26, 0xD9	; 217
 520:	a1 93       	st	Z+, r26
 522:	00 97       	sbiw	r24, 0x00	; 0
 524:	79 f7       	brne	.-34     	; 0x504 <__utoa_common+0x4>
 526:	b1 11       	cpse	r27, r1
 528:	b1 93       	st	Z+, r27
 52a:	11 92       	st	Z+, r1
 52c:	cb 01       	movw	r24, r22
 52e:	0c 94 99 02 	jmp	0x532	; 0x532 <strrev>

00000532 <strrev>:
 532:	dc 01       	movw	r26, r24
 534:	fc 01       	movw	r30, r24
 536:	67 2f       	mov	r22, r23
 538:	71 91       	ld	r23, Z+
 53a:	77 23       	and	r23, r23
 53c:	e1 f7       	brne	.-8      	; 0x536 <strrev+0x4>
 53e:	32 97       	sbiw	r30, 0x02	; 2
 540:	04 c0       	rjmp	.+8      	; 0x54a <strrev+0x18>
 542:	7c 91       	ld	r23, X
 544:	6d 93       	st	X+, r22
 546:	70 83       	st	Z, r23
 548:	62 91       	ld	r22, -Z
 54a:	ae 17       	cp	r26, r30
 54c:	bf 07       	cpc	r27, r31
 54e:	c8 f3       	brcs	.-14     	; 0x542 <strrev+0x10>
 550:	08 95       	ret

00000552 <_exit>:
 552:	f8 94       	cli

00000554 <__stop_program>:
 554:	ff cf       	rjmp	.-2      	; 0x554 <__stop_program>
